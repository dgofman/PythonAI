# -*- coding: utf-8 -*-
"""Gradient Descent Method

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fz_lUgE9yHW-0AthXt3VUkZ-CdfFijng
"""

import time
import numpy as np
import matplotlib.pyplot as plt

N = 20     # number of iterations
xx = 0     # initial value
lmd = 0.1  # lambda step

def f(x):
    return x*x - 5*x + 5

def df(x):
    return 2*x - 5

def y(x):
  return x - lmd * df(x)

x_plt = np.arange(0, 5.0, 0.1)
print('x_plt:', x_plt)
f_plt = [f(x) for x in x_plt]
print('f_plt:', f_plt)

plt.ion()   # interactive mode on
fig, ax = plt.subplots()
ax.grid(True)

ax.plot(x_plt, f_plt)

point = ax.scatter(xx, f(xx), c='red')
ax.scatter(xx, f(xx), c='green', alpha=.4)

for i in range(N):
    xx = y(xx)
    print(xx, f(xx))

    if i % 2 != 0:
        ax.scatter(xx, f(xx), c='green', alpha=.4)

    point.set_offsets([xx, f(xx)])

    # redraw
    fig.canvas.draw()
    fig.canvas.flush_events()
    time.sleep(0.1)

plt.ioff()   # interactive mode off

print(xx)
ax.scatter(xx, f(xx), c='blue')
plt.show()